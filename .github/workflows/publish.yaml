name: Build and Push Docker Images

on:
  push:
    branches:
      - main

env:
  GH_VERSION: ${{github.sha}}
  REGISTRY_NAME: ghcr.io
  REGISTRY_USER: ${{github.repository_owner}}
  REGISTRY_PASSWORD: ${{secrets.G_TOKEN}}
  IMAGE_NAME: n8n-commit
  VERSION_NUMBER: ${{github.run_number}}
  BRANCH_NAME: dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      security-events: write
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
      - name: Extract metadata (tags and labels) from Docker
        id: metadata
        uses: docker/metadata-action@v5
        with:
          labels: ${{env.IMAGE_NAME}}
          images: ${{env.REGISTRY_NAME}}/${{env.REGISTRY_USER}}/${{env.IMAGE_NAME}}
          tags: ${{env.GH_VERSION}}
      - name: Login to Github container registry
        uses: docker/login-action@v3
        with:
          registry: ${{env.REGISTRY_NAME}}
          username: ${{env.REGISTRY_USER}}
          password: ${{env.REGISTRY_PASSWORD}}
      - name: Build and Push to Registry
        id: push
        uses: docker/build-push-action@v6
        with:
          push: 'true'
          context: .
          file: ./docker/Dockerfile
          tags: |
            ${{env.REGISTRY_NAME}}/${{env.REGISTRY_USER}}/${{env.IMAGE_NAME}}:latest
            ${{env.REGISTRY_NAME}}/${{env.REGISTRY_USER}}/${{env.IMAGE_NAME}}:${{env.GH_VERSION}}
          labels: ${{steps.metadata.outputs.labels}}
          platforms: linux/amd64
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Account Microservice
      - name: Output Image name
        run: |
          echo "Image pushed to ${{env.REGISTRY_NAME}}/${{env.REGISTRY_USER}}/${{env.IMAGE_NAME}}:${{env.GH_VERSION}}"

      - name: Generate release notes
        id: release_notes
        uses: release-drafter/release-drafter@v6.1.0
        with:
          config-name: release-drafter.yaml
        env:
          GITHUB_TOKEN: ${{env.REGISTRY_PASSWORD}}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
          echo "No tags found. Setting latest_tag to none."
          latest_tag="none"
          fi
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          
      - name: Increment tag
        id: increment_tag
        run: |
              if [ "$latest_tag" == "none" ]; then
                new_tag="v1.0.0"
              else
                new_tag=$(echo "$latest_tag" | awk -F. -v OFS=. '{$NF++;print}')
              fi
              echo "New tag: $new_tag"
              echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git tag "$new_tag"
          git push origin "$new_tag"

      - name: Create Release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: ${{ env.new_tag }}
          name: Release ${{ env.new_tag }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
          token: '${{ env.REGISTRY_PASSWORD }}'

